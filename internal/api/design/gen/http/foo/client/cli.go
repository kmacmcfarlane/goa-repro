// Code generated by goa v3.5.3, DO NOT EDIT.
//
// foo HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/kmacmcfarlane/goa-reference-bug-repro/internal/api/design

package client

import (
	"encoding/json"
	"fmt"

	foo "github.com/kmacmcfarlane/goa-reference-bug-repro/internal/api/design/gen/foo"
	goa "goa.design/goa/v3/pkg"
)

// BuildGetPayload builds the payload for the foo Get endpoint from CLI flags.
func BuildGetPayload(fooGetBody string) (*foo.ChildType, error) {
	var err error
	var body GetRequestBody
	{
		err = json.Unmarshal([]byte(fooGetBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"fromProfileID\": 658594,\n      \"fromProfileUUID\": \"91533209-d516-41a8-aa93-97e36b4ab195\",\n      \"validateMe\": \"one\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.fromProfileUUID", body.FromProfileUUID, goa.FormatUUID))

		if body.FromProfileID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.fromProfileID", body.FromProfileID, 1, true))
		}
		if body.ValidateMe != nil {
			if !(*body.ValidateMe == "one" || *body.ValidateMe == "two") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.validateMe", *body.ValidateMe, []interface{}{"one", "two"}))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &foo.ChildType{
		FromProfileUUID: body.FromProfileUUID,
		FromProfileID:   body.FromProfileID,
		ValidateMe:      body.ValidateMe,
	}

	return v, nil
}
