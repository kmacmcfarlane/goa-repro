// Code generated by goa v3.5.3, DO NOT EDIT.
//
// foo views
//
// Command:
// $ goa gen
// github.com/kmacmcfarlane/goa-reference-bug-repro/internal/api/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Resulttype is the viewed result type that is projected based on a view.
type Resulttype struct {
	// Type to project
	Projected *ResulttypeView
	// View to render
	View string
}

// ResulttypeView is a type that runs validations on a projected type.
type ResulttypeView struct {
	// profile uuid of the endorsement sender
	FromProfileUUID *string `json:"fromProfileUuid"`
	// profile id of the endorsement sender
	FromProfileID *int `json:"fromProfileId"`
}

var (
	// ResulttypeMap is a map indexing the attribute names of Resulttype by view
	// name.
	ResulttypeMap = map[string][]string{
		"default": {
			"fromProfileUUID",
			"fromProfileID",
		},
	}
)

// ValidateResulttype runs the validations defined on the viewed result type
// Resulttype.
func ValidateResulttype(result *Resulttype) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateResulttypeView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateResulttypeView runs the validations defined on ResulttypeView using
// the "default" view.
func ValidateResulttypeView(result *ResulttypeView) (err error) {
	if result.FromProfileUUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fromProfileUUID", "result"))
	}
	if result.FromProfileID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fromProfileID", "result"))
	}
	if result.FromProfileUUID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.fromProfileUUID", *result.FromProfileUUID, goa.FormatUUID))
	}
	if result.FromProfileID != nil {
		if *result.FromProfileID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("result.fromProfileID", *result.FromProfileID, 1, true))
		}
	}
	return
}
