// Code generated by goa v3.5.3, DO NOT EDIT.
//
// foo service
//
// Command:
// $ goa gen
// github.com/kmacmcfarlane/goa-reference-bug-repro/internal/api/design

package foo

import (
	"context"

	fooviews "github.com/kmacmcfarlane/goa-reference-bug-repro/internal/api/design/gen/foo/views"
)

// Service is the foo service interface.
type Service interface {
	// Get implements Get.
	Get(context.Context, *ChildType) (res *Resulttype, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "foo"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"Get"}

// ChildType is the payload type of the foo service Get method.
type ChildType struct {
	// profile uuid of the endorsement sender
	FromProfileUUID string `json:"fromProfileUuid"`
	// profile id of the endorsement sender
	FromProfileID int `json:"fromProfileId"`
	ValidateMe    *string
}

// Resulttype is the result type of the foo service Get method.
type Resulttype struct {
	// profile uuid of the endorsement sender
	FromProfileUUID string `json:"fromProfileUuid"`
	// profile id of the endorsement sender
	FromProfileID int `json:"fromProfileId"`
}

// NewResulttype initializes result type Resulttype from viewed result type
// Resulttype.
func NewResulttype(vres *fooviews.Resulttype) *Resulttype {
	return newResulttype(vres.Projected)
}

// NewViewedResulttype initializes viewed result type Resulttype from result
// type Resulttype using the given view.
func NewViewedResulttype(res *Resulttype, view string) *fooviews.Resulttype {
	p := newResulttypeView(res)
	return &fooviews.Resulttype{Projected: p, View: "default"}
}

// newResulttype converts projected type Resulttype to service type Resulttype.
func newResulttype(vres *fooviews.ResulttypeView) *Resulttype {
	res := &Resulttype{}
	if vres.FromProfileUUID != nil {
		res.FromProfileUUID = *vres.FromProfileUUID
	}
	if vres.FromProfileID != nil {
		res.FromProfileID = *vres.FromProfileID
	}
	return res
}

// newResulttypeView projects result type Resulttype to projected type
// ResulttypeView using the "default" view.
func newResulttypeView(res *Resulttype) *fooviews.ResulttypeView {
	vres := &fooviews.ResulttypeView{
		FromProfileUUID: &res.FromProfileUUID,
		FromProfileID:   &res.FromProfileID,
	}
	return vres
}
